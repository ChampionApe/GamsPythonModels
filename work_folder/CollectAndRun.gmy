$ONEOLCOM
$EOLCOM #


# Root File for model
OPTION SYSOUT=OFF, SOLPRINT=OFF, LIMROW=0, LIMCOL=0, DECIMALS=6;
;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_CollectFile.gms
# ----------------------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_functions.gms
# ----------------------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------------------
#  Define function: load_level
# ----------------------------------------------------------------------------------------------------



# ----------------------------------------------------------------------------------------------------
#  Define function: load_fixed
# ----------------------------------------------------------------------------------------------------


;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_sets.gms
# ----------------------------------------------------------------------------------------------------

sets
	alias_map2
	n
	alias_set
;

alias(n,nnn,nn);

sets
	kno_inp[n]
	kno_out[n]
	t_fg_out[n]
	inp_test_in[n]
	int[n]
	t_inp_in[n]
	t_int_out[n]
	out_test_out[n]
	i_kno_out[n]
	i_bra_no_in[n]
	t_out_out[n]
	alias_[alias_set,alias_map2]
	i_bra_no_out[n]
	t_out_in[n]
	t_inp_out[n]
	map_test_out[n,nn]
	t_fg_in[n]
	i_bra_o_out[n]
	out[n]
	out_test_in[n]
	inp[n]
	map_all[n,nn]
	t_wT_in[n]
	i_bra_o_in[n]
	i_kno_in[n]
	bra_test_out[n]
	wT[n]
	i_kno_no_in[n]
	inp_test_out[n]
	fg[n]
	t_int_in[n]
	t_wT_out[n]
	bra_test_in[n]
	kno_test_out[n]
	kno_test_in[n]
	map_test_in[n,nn]
;
$GDXIN %test%
$onMulti
$load n
$load alias_map2
$load alias_set
$load kno_inp
$load kno_out
$load t_fg_out
$load inp_test_in
$load int
$load t_inp_in
$load t_int_out
$load out_test_out
$load i_kno_out
$load i_bra_no_in
$load t_out_out
$load i_bra_no_out
$load t_out_in
$load t_inp_out
$load t_fg_in
$load i_bra_o_out
$load out
$load out_test_in
$load inp
$load t_wT_in
$load i_bra_o_in
$load i_kno_in
$load bra_test_out
$load wT
$load i_kno_no_in
$load inp_test_out
$load fg
$load t_int_in
$load t_wT_out
$load bra_test_in
$load kno_test_out
$load kno_test_in
$load alias_
$load map_test_in
$load map_test_out
$load map_all
$GDXIN
$offMulti
;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_parameters.gms
# ----------------------------------------------------------------------------------------------------

;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_groups.gms
# ----------------------------------------------------------------------------------------------------


# ---------------------------------------------test_gtech---------------------------------------------
#  Initialize test_gtech group
# ----------------------------------------------------------------------------------------------------
$offlisting
VARIABLE eta[n] "";
eta.L[n]$((kno_out[n])) = 0;
VARIABLE sigma[n] "";
sigma.L[n]$((kno_inp[n])) = 0;
VARIABLE mu[n,nn] "";
mu.L[n,nn]$((map_all[n,nn])) = 0;
VARIABLE mark_up[n] "";
mark_up.L[n]$((out[n])) = 0;
$onlisting


# ----------------------------------------------test_gexo---------------------------------------------
#  Initialize test_gexo group
# ----------------------------------------------------------------------------------------------------
$offlisting
VARIABLE PwT[n] "";
PwT.L[n]$((inp[n])) = 0;
VARIABLE qS[n] "";
qS.L[n]$((out[n])) = 0;
$onlisting


# ---------------------------------------------test_gendo---------------------------------------------
#  Initialize test_gendo group
# ----------------------------------------------------------------------------------------------------
$offlisting
VARIABLE PbT[n] "";
PbT.L[n]$((out[n])) = 0;
VARIABLE qD[n] "";
qD.L[n]$((wT[n])) = 0;
$onlisting
$offlisting
  
# --------------------------------------------__load_group--------------------------------------------
#  Initialize __load_group group
# ----------------------------------------------------------------------------------------------------
$offlisting
$onlisting
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    parameter load_PbT[n] "";
    load_PbT[n]$(((out[n]))) = 0;
  
    parameter load_PwT[n] "";
    load_PwT[n]$(((int[n]))) = 0;
  
    parameter load_qD[n] "";
    load_qD[n]$(((wT[n]))) = 0;
  
  execute_load "%test%" 
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------
 load_PbT=PbT.l  load_PwT=PwT.l  load_qD=qD.l ;
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    PbT.l[n]$(((out[n]))) = load_PbT[n];
  
    PwT.l[n]$(((int[n]))) = load_PwT[n];
  
    qD.l[n]$(((wT[n]))) = load_qD[n];
$onlisting
;
$offlisting
  
# --------------------------------------------__load_group--------------------------------------------
#  Initialize __load_group group
# ----------------------------------------------------------------------------------------------------
$offlisting
$onlisting
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    parameter load_PwT[n] "";
    load_PwT[n]$(((inp[n]))) = 0;
  
    parameter load_qS[n] "";
    load_qS[n]$(((out[n]))) = 0;
  
  execute_load "%test%" 
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------
 load_PwT=PwT.l  load_qS=qS.l ;
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    PwT.fx[n]$(((inp[n]))) = load_PwT[n];
  
    qS.fx[n]$(((out[n]))) = load_qS[n];
$onlisting
;
$offlisting
  
# --------------------------------------------__load_group--------------------------------------------
#  Initialize __load_group group
# ----------------------------------------------------------------------------------------------------
$offlisting
$onlisting
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    parameter load_eta[n] "";
    load_eta[n]$(((kno_out[n]))) = 0;
  
    parameter load_sigma[n] "";
    load_sigma[n]$(((kno_inp[n]))) = 0;
  
    parameter load_mu[n,nn] "";
    load_mu[n,nn]$(((map_all[n,nn]))) = 0;
  
    parameter load_mark_up[n] "";
    load_mark_up[n]$(((out[n]))) = 0;
  
  execute_load "%test%" 
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------
 load_eta=eta.l  load_sigma=sigma.l  load_mu=mu.l  load_mark_up=mark_up.l ;
  
# ----------------------------------------------------------------------------------------------------
#  Loop over __load_group
# ----------------------------------------------------------------------------------------------------

    eta.fx[n]$(((kno_out[n]))) = load_eta[n];
  
    sigma.fx[n]$(((kno_inp[n]))) = load_sigma[n];
  
    mu.fx[n,nn]$(((map_all[n,nn]))) = load_mu[n,nn];
  
    mark_up.fx[n]$(((out[n]))) = load_mark_up[n];
$onlisting
;
;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\test_blocks.gms
# ----------------------------------------------------------------------------------------------------


# ------------------------------------------------M_in------------------------------------------------
#  Initialize M_in equation block
# ----------------------------------------------------------------------------------------------------
EQUATION E_in_p_o[n];
E_in_p_o[n]$((t_out_in[n]) and sigma.l[n] <> 1).. 	PbT[n]  =E=  sum(nn$(map_test_in[nn,n]), mu[nn,n] * PwT[nn]**(1-sigma[n]))**(1/(1-sigma[n]));
EQUATION E_in_p_no[n];
E_in_p_no[n]$((i_kno_no_in[n]) and sigma.l[n] <> 1).. 	PwT[n]  =E=  sum(nn$(map_test_in[nn,n]), mu[nn,n] * PwT[nn]**(1-sigma[n]))**(1/(1-sigma[n]));
EQUATION E_in_pc_CD_o[n];
E_in_pc_CD_o[n]$((t_out_in[n]) and sigma.l[n] = 1).. 	PbT[n]  =E=  prod(nn$(map_test_in[nn,n]), PwT[nn]**(mu[nn,n]));
EQUATION E_in_p_CD_no[n];
E_in_p_CD_no[n]$((i_kno_no_in[n]) and sigma.l[n] = 1).. 	PwT[n]  =E=  prod(nn$(map_test_in[nn,n]), PwT[nn]**(mu[nn,n]));
EQUATION E_in_d_o[n];
E_in_d_o[n]$(i_bra_o_in[n]).. 	qD[n]  =E=  sum(nn$(map_test_in[n,nn]), mu[n,nn] * (PbT[nn]/PwT[n])**(sigma[nn]) * qS[nn]);
EQUATION E_in_d_no[n];
E_in_d_no[n]$(i_bra_no_in[n]).. 	qD[n]  =E=  sum(nn$(map_test_in[n,nn]), mu[n,nn] * (PwT[nn]/PwT[n])**(sigma[nn]) * qD[nn]);

# ----------------------------------------------------------------------------------------------------
#  Define M_in model
# ----------------------------------------------------------------------------------------------------
Model M_in /
E_in_p_o, E_in_p_no, E_in_pc_CD_o, E_in_p_CD_no, E_in_d_o, E_in_d_no
/;


# ------------------------------------------------M_out-----------------------------------------------
#  Initialize M_out equation block
# ----------------------------------------------------------------------------------------------------
EQUATION E_out_p[n];
E_out_p[n]$(i_kno_out[n]).. 	PwT[n]  =E=  (sum(nn$(map_test_out[nn,n] and t_out_out[nn]), mu[nn,n] * PbT[nn]**(1-eta[n]))+sum(nn$(map_test_out[nn,n] and not t_out_out[nn]), mu[nn,n] * PwT[nn]**(1-eta[n])))**(1/(1-eta[n]));
EQUATION E_out_d_o[n];
E_out_d_o[n]$(i_bra_o_out[n]).. 	qS[n]  =E=  sum(nn$(map_test_out[n,nn]), mu[n,nn] * (PbT[n]/PwT[nn])**(-eta[nn]) * qD[nn]);
EQUATION E_out_d_no[n];
E_out_d_no[n]$(i_bra_no_out[n]).. 	qD[n]  =E=  sum(nn$(map_test_out[n,nn]), mu[n,nn] * (PwT[n]/PwT[nn])**(-eta[nn]) * qD[nn]);

# ----------------------------------------------------------------------------------------------------
#  Define M_out model
# ----------------------------------------------------------------------------------------------------
Model M_out /
E_out_p, E_out_d_o, E_out_d_no
/;

;
;

# ----------------------------------------------------------------------------------------------------
#  Import file: C:\Users\sxj477\Documents\GitHub\GamsPythonModels\work_folder\RunFile.gms
# ----------------------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------------------$FIX test_gtech, test_gexo;
# ----------------------------------------------------------------------------------------------------
$offlisting
eta.FX[n]$((kno_out[n])) = eta.L[n];
sigma.FX[n]$((kno_inp[n])) = sigma.L[n];
mu.FX[n,nn]$((map_all[n,nn])) = mu.L[n,nn];
mark_up.FX[n]$((out[n])) = mark_up.L[n];
PwT.FX[n]$((inp[n])) = PwT.L[n];
qS.FX[n]$((out[n])) = qS.L[n];
$onlisting


# ----------------------------------------------------------------------------------------------------$UNFIX test_gendo;
# ----------------------------------------------------------------------------------------------------
$offlisting
PbT.lo[n]$((out[n])) = -inf;
PbT.up[n]$((out[n])) = inf;
PwT.lo[n]$((int[n])) = -inf;
PwT.up[n]$((int[n])) = inf;
qD.lo[n]$((wT[n])) = -inf;
qD.up[n]$((wT[n])) = inf;
$onlisting


# ----------------------------------------------------------------------------------------------------
#  Define test model
# ----------------------------------------------------------------------------------------------------
Model test /
E_in_p_o, E_in_p_no, E_in_pc_CD_o, E_in_p_CD_no, E_in_d_o, E_in_d_no, E_out_p, E_out_d_o, E_out_d_no
/;


solve test using CNS;
;
